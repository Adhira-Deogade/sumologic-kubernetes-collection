<match host.kubelet.**>
  @type relabel
  @label @KUBELET
</match>
<label @KUBELET>
  <filter host.kubelet.**>
    @type kubernetes_sumologic
    source_category kubelet
    source_name k8s_kubelet
    source_category_prefix "#{ENV['SOURCE_CATEGORY_PREFIX']}"
    exclude_facility_regex "#{ENV['EXCLUDE_FACILITY_REGEX']}"
    exclude_host_regex "#{ENV['EXCLUDE_HOST_REGEX']}"
    exclude_priority_regex "#{ENV['EXCLUDE_PRIORITY_REGEX']}"
    exclude_unit_regex "#{ENV['EXCLUDE_UNIT_REGEX']}"
  </filter>
  <match **>
    @type sumologic
    @id sumologic.endpoint.logs.kubelet
    @include logs.output.conf
    <buffer>
      {{- if .Values.sumologic.fluentd.persistence.enabled }}
      @type file
      path /fluentd/buffer/logs.kubelet
      {{- else if eq .Values.sumologic.fluentd.buffer "file" }}
      @type file
      path /fluentd/buffer/logs.kubelet
      compress gzip
      {{- else }}
      @type memory
      compress gzip
      total_limit_size "#{ENV['TOTAL_LIMIT_SIZE']}"
      {{- end }}
      @include buffer.output.conf
    </buffer>
  </match>
</label>
<match host.**>
  @type relabel
  @label @SYSTEMD
</match>
<label @SYSTEMD>
  <filter host.**>
    @type kubernetes_sumologic
    source_category system
    source_category_prefix "#{ENV['SOURCE_CATEGORY_PREFIX']}"
    exclude_facility_regex "#{ENV['EXCLUDE_FACILITY_REGEX']}"
    exclude_host_regex "#{ENV['EXCLUDE_HOST_REGEX']}"
    exclude_priority_regex "#{ENV['EXCLUDE_PRIORITY_REGEX']}"
    exclude_unit_regex "#{ENV['EXCLUDE_UNIT_REGEX']}"
  </filter>
  <filter host.**>
    @type record_modifier
    <record>
      _sumo_metadata ${record["_sumo_metadata"][:source] = tag_parts[1]; record["_sumo_metadata"]}
    </record>
  </filter>
  <match **>
    @type sumologic
    @id sumologic.endpoint.logs.systemd
    @include logs.output.conf
    <buffer>
      {{- if .Values.sumologic.fluentd.persistence.enabled }}
      @type file
      path /fluentd/buffer/logs.systemd
      {{- else if eq .Values.sumologic.fluentd.buffer "file" }}
      @type file
      path /fluentd/buffer/logs.systemd
      compress gzip
      {{- else }}
      @type memory
      compress gzip
      total_limit_size "#{ENV['TOTAL_LIMIT_SIZE']}"
      {{- end }}
      @include buffer.output.conf
    </buffer>
  </match>
</label>